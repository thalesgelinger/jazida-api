// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: plates.sql

package db

import (
	"context"
)

const addPlate = `-- name: AddPlate :exec
INSERT INTO plates (client_id, plate) 
VALUES ($1, $2)
`

type AddPlateParams struct {
	ClientID int32  `json:"client_id"`
	Plate    string `json:"plate"`
}

func (q *Queries) AddPlate(ctx context.Context, arg AddPlateParams) error {
	_, err := q.db.Exec(ctx, addPlate, arg.ClientID, arg.Plate)
	return err
}

const getPlateById = `-- name: GetPlateById :one
SELECT plate
FROM plates
WHERE id = $1
`

func (q *Queries) GetPlateById(ctx context.Context, id int32) (string, error) {
	row := q.db.QueryRow(ctx, getPlateById, id)
	var plate string
	err := row.Scan(&plate)
	return plate, err
}

const getPlatesByClientId = `-- name: GetPlatesByClientId :many
SELECT id, plate 
FROM plates 
WHERE client_id = $1
`

type GetPlatesByClientIdRow struct {
	ID    int32  `json:"id"`
	Plate string `json:"plate"`
}

func (q *Queries) GetPlatesByClientId(ctx context.Context, clientID int32) ([]GetPlatesByClientIdRow, error) {
	rows, err := q.db.Query(ctx, getPlatesByClientId, clientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPlatesByClientIdRow
	for rows.Next() {
		var i GetPlatesByClientIdRow
		if err := rows.Scan(&i.ID, &i.Plate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
