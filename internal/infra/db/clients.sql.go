// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: clients.sql

package db

import (
	"context"
	"database/sql"
)

const addClient = `-- name: AddClient :exec
INSERT INTO clients (name) 
VALUES (?)
`

func (q *Queries) AddClient(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, addClient, name)
	return err
}

const getClients = `-- name: GetClients :many
SELECT 
    c.id,
    c.name,    
    p.plate    
FROM clients c
LEFT JOIN plates p ON c.id = p.client_id
`

type GetClientsRow struct {
	ID    int64          `json:"id"`
	Name  string         `json:"name"`
	Plate sql.NullString `json:"plate"`
}

func (q *Queries) GetClients(ctx context.Context) ([]GetClientsRow, error) {
	rows, err := q.db.QueryContext(ctx, getClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClientsRow
	for rows.Next() {
		var i GetClientsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Plate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
