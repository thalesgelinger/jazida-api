// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: loads.sql

package db

import (
	"context"
)

const createLoad = `-- name: CreateLoad :exec
INSERT INTO loads (client_id, plate_id, material_id, quantity, payment_method, signature) 
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateLoadParams struct {
	ClientID      int64  `json:"client_id"`
	PlateID       int64  `json:"plate_id"`
	MaterialID    int64  `json:"material_id"`
	Quantity      string `json:"quantity"`
	PaymentMethod string `json:"payment_method"`
	Signature     string `json:"signature"`
}

func (q *Queries) CreateLoad(ctx context.Context, arg CreateLoadParams) error {
	_, err := q.db.ExecContext(ctx, createLoad,
		arg.ClientID,
		arg.PlateID,
		arg.MaterialID,
		arg.Quantity,
		arg.PaymentMethod,
		arg.Signature,
	)
	return err
}

const getLoads = `-- name: GetLoads :many
SELECT 
    l.id,
    c.name AS client,    
    p.plate AS plate,    
    m.name AS material,
    l.quantity,     
    l.payment_method,
    l.signature
FROM loads l
JOIN clients c ON l.client_id = c.id
JOIN plates p ON l.plate_id = p.id
JOIN materials m ON l.material_id = m.id
`

type GetLoadsRow struct {
	ID            int64  `json:"id"`
	Client        string `json:"client"`
	Plate         string `json:"plate"`
	Material      string `json:"material"`
	Quantity      string `json:"quantity"`
	PaymentMethod string `json:"payment_method"`
	Signature     string `json:"signature"`
}

func (q *Queries) GetLoads(ctx context.Context) ([]GetLoadsRow, error) {
	rows, err := q.db.QueryContext(ctx, getLoads)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLoadsRow
	for rows.Next() {
		var i GetLoadsRow
		if err := rows.Scan(
			&i.ID,
			&i.Client,
			&i.Plate,
			&i.Material,
			&i.Quantity,
			&i.PaymentMethod,
			&i.Signature,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
