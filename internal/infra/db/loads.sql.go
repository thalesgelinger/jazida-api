// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: loads.sql

package db

import (
	"context"
)

const createLoad = `-- name: CreateLoad :exec
INSERT INTO loads (client, plate, material, quantity, paymentmethod, signature) 
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateLoadParams struct {
	Client        string `json:"client"`
	Plate         string `json:"plate"`
	Material      string `json:"material"`
	Quantity      string `json:"quantity"`
	Paymentmethod string `json:"paymentmethod"`
	Signature     string `json:"signature"`
}

func (q *Queries) CreateLoad(ctx context.Context, arg CreateLoadParams) error {
	_, err := q.db.ExecContext(ctx, createLoad,
		arg.Client,
		arg.Plate,
		arg.Material,
		arg.Quantity,
		arg.Paymentmethod,
		arg.Signature,
	)
	return err
}

const getLoads = `-- name: GetLoads :many
SELECT 
    id,
    client,    
    plate,    
    material,
    quantity,     
    paymentmethod,
    signature
FROM loads
`

func (q *Queries) GetLoads(ctx context.Context) ([]Load, error) {
	rows, err := q.db.QueryContext(ctx, getLoads)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Load
	for rows.Next() {
		var i Load
		if err := rows.Scan(
			&i.ID,
			&i.Client,
			&i.Plate,
			&i.Material,
			&i.Quantity,
			&i.Paymentmethod,
			&i.Signature,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
